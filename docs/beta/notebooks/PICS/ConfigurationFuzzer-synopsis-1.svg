<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (20230911.1827)
 -->
<!-- Pages: 1 -->
<svg width="586pt" height="729pt"
 viewBox="0.00 0.00 586.12 729.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 725)">
<g id="a_graph0"><a xlink:title="OptionRunner class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-725 582.12,-725 582.12,4 -4,4"/>
</a>
</g>
<!-- OptionRunner -->
<g id="node1" class="node">
<title>OptionRunner</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class OptionRunner:&#10;Run a program while determining its option grammar">
<polygon fill="none" stroke="black" points="1.5,-32.62 1.5,-167.88 113.5,-167.88 113.5,-32.62 1.5,-32.62"/>
<text text-anchor="start" x="14" y="-151.57" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionRunner</text>
<polyline fill="none" stroke="black" points="1.5,-141.88 113.5,-141.88"/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="OptionRunner">
<g id="a_node1_1"><a xlink:href="#" xlink:title="__init__(self, program: Union[str, List[str]], arguments: Optional[str] = None, *, log: bool = False, miner_class: Optional[Type[OptionGrammarMiner]] = None):&#10;Constructor.&#10;`program` &#45; the (Python) program to be executed&#10;`arguments` &#45; an (optional) string with arguments for `program`&#10;`log` &#45; if True, enable logging in miner&#10;`miner_class` &#45; the `OptionGrammarMiner` class to be used&#10;(default: `OptionGrammarMiner`)">
<text text-anchor="start" x="9.5" y="-129.38" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="ebnf_grammar(self):&#10;Return extracted grammar in EBNF form">
<text text-anchor="start" x="9.5" y="-118.12" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">ebnf_grammar()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="grammar(self):&#10;Return extracted grammar in BNF form">
<text text-anchor="start" x="9.5" y="-106.88" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">grammar()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="executable(self)">
<text text-anchor="start" x="9.5" y="-94.62" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">executable()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="find_contents(self)">
<text text-anchor="start" x="9.5" y="-83.38" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_contents()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="find_grammar(self)">
<text text-anchor="start" x="9.5" y="-72.12" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_grammar()</text>
</a>
</g>
<g id="a_node1_7"><a xlink:href="#" xlink:title="invoker(self)">
<text text-anchor="start" x="9.5" y="-60.88" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">invoker()</text>
</a>
</g>
<g id="a_node1_8"><a xlink:href="#" xlink:title="set_arguments(self, args)">
<text text-anchor="start" x="9.5" y="-49.62" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">set_arguments()</text>
</a>
</g>
<g id="a_node1_9"><a xlink:href="#" xlink:title="set_invocation(self, program)">
<text text-anchor="start" x="9.5" y="-38.38" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">set_invocation()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProgramRunner -->
<g id="node2" class="node">
<title>ProgramRunner</title>
<g id="a_node2"><a xlink:href="Fuzzer.ipynb" xlink:title="class ProgramRunner:&#10;Test a program with inputs.">
<polygon fill="none" stroke="black" points="0,-237 0,-282.25 115,-282.25 115,-237 0,-237"/>
<text text-anchor="start" x="8" y="-265.95" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProgramRunner</text>
<polyline fill="none" stroke="black" points="0,-256.25 115,-256.25"/>
<g id="a_node2_10"><a xlink:href="#" xlink:title="ProgramRunner">
<g id="a_node2_11"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self, program: Union[str, List[str]]) &#45;&gt; None:&#10;Initialize.&#10;`program` is a program spec as passed to `subprocess.run()`">
<text text-anchor="start" x="27.5" y="-243.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- OptionRunner&#45;&gt;ProgramRunner -->
<g id="edge1" class="edge">
<title>OptionRunner&#45;&gt;ProgramRunner</title>
<path fill="none" stroke="black" d="M57.5,-167.99C57.5,-187.81 57.5,-208.66 57.5,-225.37"/>
<polygon fill="none" stroke="black" points="54,-225.21 57.5,-235.21 61,-225.21 54,-225.21"/>
</g>
<!-- Runner -->
<g id="node3" class="node">
<title>Runner</title>
<g id="a_node3"><a xlink:href="Fuzzer.ipynb" xlink:title="class Runner:&#10;Base class for testing inputs.">
<polygon fill="none" stroke="black" points="19.5,-319.25 19.5,-417.5 95.5,-417.5 95.5,-319.25 19.5,-319.25"/>
<text text-anchor="start" x="34.62" y="-401.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Runner</text>
<polyline fill="none" stroke="black" points="19.5,-391.5 95.5,-391.5"/>
<g id="a_node3_12"><a xlink:href="#" xlink:title="Runner">
<g id="a_node3_13"><a xlink:href="Fuzzer.ipynb" xlink:title="FAIL = &#39;FAIL&#39;">
<text text-anchor="start" x="27.5" y="-378" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">FAIL</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="Fuzzer.ipynb" xlink:title="PASS = &#39;PASS&#39;">
<text text-anchor="start" x="27.5" y="-366.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">PASS</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="Fuzzer.ipynb" xlink:title="UNRESOLVED = &#39;UNRESOLVED&#39;">
<text text-anchor="start" x="27.5" y="-355.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">UNRESOLVED</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="19.5,-349.75 95.5,-349.75"/>
<g id="a_node3_16"><a xlink:href="#" xlink:title="Runner">
<g id="a_node3_17"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Initialize">
<text text-anchor="start" x="27.5" y="-337.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_18"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, inp: str) &#45;&gt; Any:&#10;Run the runner with the given input">
<text text-anchor="start" x="27.5" y="-326" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProgramRunner&#45;&gt;Runner -->
<g id="edge2" class="edge">
<title>ProgramRunner&#45;&gt;Runner</title>
<path fill="none" stroke="black" d="M57.5,-282.74C57.5,-290.13 57.5,-298.75 57.5,-307.6"/>
<polygon fill="none" stroke="black" points="54,-307.36 57.5,-317.36 61,-307.36 54,-307.36"/>
</g>
<!-- OptionFuzzer -->
<g id="node4" class="node">
<title>OptionFuzzer</title>
<g id="a_node4"><a xlink:href="#" xlink:title="class OptionFuzzer:&#10;Fuzz a (Python) program using its arguments">
<polygon fill="none" stroke="black" points="171.25,-72 171.25,-128.5 269.75,-128.5 269.75,-72 171.25,-72"/>
<text text-anchor="start" x="179.25" y="-112.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionFuzzer</text>
<polyline fill="none" stroke="black" points="171.25,-102.5 269.75,-102.5"/>
<g id="a_node4_19"><a xlink:href="#" xlink:title="OptionFuzzer">
<g id="a_node4_20"><a xlink:href="#" xlink:title="__init__(self, runner: OptionRunner, *args, **kwargs):&#10;Constructor. `runner` is an OptionRunner.">
<text text-anchor="start" x="190.5" y="-90" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_21"><a xlink:href="#" xlink:title="run(self, runner=None, inp=&#39;&#39;):&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="190.5" y="-78.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node5" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node5"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="133.75,-241.62 133.75,-277.62 307.25,-277.62 307.25,-241.62 133.75,-241.62"/>
<text text-anchor="start" x="141.75" y="-256.32" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- OptionFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge3" class="edge">
<title>OptionFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M220.5,-128.66C220.5,-157.02 220.5,-201.11 220.5,-229.93"/>
<polygon fill="none" stroke="black" points="217,-229.74 220.5,-239.74 224,-229.74 217,-229.74"/>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node6" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node6"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="113.12,-350.38 113.12,-386.38 327.88,-386.38 327.88,-350.38 113.12,-350.38"/>
<text text-anchor="start" x="121.12" y="-365.07" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge4" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M220.5,-277.78C220.5,-294.18 220.5,-319.21 220.5,-338.66"/>
<polygon fill="none" stroke="black" points="217,-338.4 220.5,-348.4 224,-338.4 217,-338.4"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node7" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node7"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="106.38,-454.5 106.38,-499.75 334.62,-499.75 334.62,-454.5 106.38,-454.5"/>
<text text-anchor="start" x="114.38" y="-483.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="106.38,-473.75 334.62,-473.75"/>
<g id="a_node7_22"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node7_23"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="190.5" y="-461.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge5" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M220.5,-386.53C220.5,-401.68 220.5,-424.22 220.5,-442.89"/>
<polygon fill="none" stroke="black" points="217,-442.69 220.5,-452.69 224,-442.69 217,-442.69"/>
</g>
<!-- GrammarFuzzer -->
<g id="node8" class="node">
<title>GrammarFuzzer</title>
<g id="a_node8"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="162.62,-536.75 162.62,-604.5 278.38,-604.5 278.38,-536.75 162.62,-536.75"/>
<text text-anchor="start" x="170.62" y="-588.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="162.62,-578.5 278.38,-578.5"/>
<g id="a_node8_24"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node8_25"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="187.5" y="-566" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node8_26"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="187.5" y="-554.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node8_27"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="187.5" y="-543.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge6" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M220.5,-499.81C220.5,-507.38 220.5,-516.18 220.5,-524.92"/>
<polygon fill="none" stroke="black" points="217,-524.77 220.5,-534.77 224,-524.77 217,-524.77"/>
</g>
<!-- Fuzzer -->
<g id="node9" class="node">
<title>Fuzzer</title>
<g id="a_node9"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="182.5,-641.5 182.5,-720.5 258.5,-720.5 258.5,-641.5 182.5,-641.5"/>
<text text-anchor="start" x="199.88" y="-704.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="182.5,-694.5 258.5,-694.5"/>
<g id="a_node9_28"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node9_29"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor">
<text text-anchor="start" x="190.5" y="-682" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node9_30"><a xlink:href="Fuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Return fuzz input">
<text text-anchor="start" x="190.5" y="-670.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node9_31"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="190.5" y="-659.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node9_32"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="190.5" y="-648.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge7" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M220.5,-604.73C220.5,-612.6 220.5,-621.18 220.5,-629.64"/>
<polygon fill="none" stroke="black" points="217,-629.49 220.5,-639.49 224,-629.49 217,-629.49"/>
</g>
<!-- OptionGrammarMiner -->
<g id="node10" class="node">
<title>OptionGrammarMiner</title>
<g id="a_node10"><a xlink:href="#" xlink:title="class OptionGrammarMiner:&#10;Helper class for extracting option grammars">
<polygon fill="none" stroke="black" points="288.25,-0.5 288.25,-200 440.75,-200 440.75,-0.5 288.25,-0.5"/>
<text text-anchor="start" x="296.25" y="-183.7" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">OptionGrammarMiner</text>
<polyline fill="none" stroke="black" points="288.25,-174 440.75,-174"/>
<g id="a_node10_33"><a xlink:href="#" xlink:title="OptionGrammarMiner">
<g id="a_node10_34"><a xlink:href="#" xlink:title="ARGUMENTS_SYMBOL = &#39;&lt;arguments&gt;&#39;">
<text text-anchor="start" x="316.5" y="-160.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">ARGUMENTS_SYMBOL</text>
</a>
</g>
<g id="a_node10_35"><a xlink:href="#" xlink:title="OPTION_SYMBOL = &#39;&lt;option&gt;&#39;">
<text text-anchor="start" x="316.5" y="-149.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">OPTION_SYMBOL</text>
</a>
</g>
</a>
</g>
<polyline fill="none" stroke="black" points="288.25,-143.5 440.75,-143.5"/>
<g id="a_node10_36"><a xlink:href="#" xlink:title="OptionGrammarMiner">
<g id="a_node10_37"><a xlink:href="#" xlink:title="__init__(self, function: Callable, log: bool = False):&#10;Constructor.&#10;`function` &#45; a function processing arguments using argparse()&#10;`log` &#45; output diagnostics if True">
<text text-anchor="start" x="307.5" y="-131" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node10_38"><a xlink:href="#" xlink:title="mine_ebnf_grammar(self):&#10;Extract EBNF option grammar">
<text text-anchor="start" x="307.5" y="-119.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">mine_ebnf_grammar()</text>
</a>
</g>
<g id="a_node10_39"><a xlink:href="#" xlink:title="mine_grammar(self):&#10;Extract BNF option grammar">
<text text-anchor="start" x="307.5" y="-108.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">mine_grammar()</text>
</a>
</g>
<g id="a_node10_40"><a xlink:href="#" xlink:title="add_group(self, locals, exclusive)">
<text text-anchor="start" x="307.5" y="-96.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_group()</text>
</a>
</g>
<g id="a_node10_41"><a xlink:href="#" xlink:title="add_int_rule(self)">
<text text-anchor="start" x="307.5" y="-85" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_int_rule()</text>
</a>
</g>
<g id="a_node10_42"><a xlink:href="#" xlink:title="add_metavar_rule(self, metavar, type_)">
<text text-anchor="start" x="307.5" y="-73.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_metavar_rule()</text>
</a>
</g>
<g id="a_node10_43"><a xlink:href="#" xlink:title="add_parameter(self, kwargs, metavar)">
<text text-anchor="start" x="307.5" y="-62.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_parameter()</text>
</a>
</g>
<g id="a_node10_44"><a xlink:href="#" xlink:title="add_str_rule(self)">
<text text-anchor="start" x="307.5" y="-51.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_str_rule()</text>
</a>
</g>
<g id="a_node10_45"><a xlink:href="#" xlink:title="add_type_rule(self, type_)">
<text text-anchor="start" x="307.5" y="-40" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_type_rule()</text>
</a>
</g>
<g id="a_node10_46"><a xlink:href="#" xlink:title="process_arg(self, arg, in_group, kwargs)">
<text text-anchor="start" x="307.5" y="-28.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_arg()</text>
</a>
</g>
<g id="a_node10_47"><a xlink:href="#" xlink:title="process_argument(self, locals, in_group)">
<text text-anchor="start" x="307.5" y="-17.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">process_argument()</text>
</a>
</g>
<g id="a_node10_48"><a xlink:href="#" xlink:title="traceit(self, frame, event, arg)">
<text text-anchor="start" x="307.5" y="-6.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">traceit()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- Legend -->
<g id="node11" class="node">
<title>Legend</title>
<text text-anchor="start" x="458.88" y="-116.25" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="458.88" y="-106.25" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="464.88" y="-106.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="458.88" y="-96.25" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="464.88" y="-96.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="458.88" y="-86.25" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="464.88" y="-86.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="458.88" y="-77.2" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
