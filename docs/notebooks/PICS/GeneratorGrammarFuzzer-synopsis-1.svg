<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (20230911.1827)
 -->
<!-- Pages: 1 -->
<svg width="566pt" height="839pt"
 viewBox="0.00 0.00 565.75 839.25" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 835.25)">
<g id="a_graph0"><a xlink:title="PGGCFuzzer class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-835.25 561.75,-835.25 561.75,4 -4,4"/>
</a>
</g>
<!-- PGGCFuzzer -->
<g id="node1" class="node">
<title>PGGCFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class PGGCFuzzer:&#10;The one grammar&#45;based fuzzer that supports all fuzzingbook features">
<polygon fill="none" stroke="black" points="154.12,-6.5 154.12,-42.5 245.88,-42.5 245.88,-6.5 154.12,-6.5"/>
<text text-anchor="start" x="162.12" y="-21.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">PGGCFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer -->
<g id="node2" class="node">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class ProbabilisticGeneratorGrammarCoverageFuzzer:&#10;Join the features of `GeneratorGrammarFuzzer`&#10;and `ProbabilisticGrammarCoverageFuzzer`">
<polygon fill="none" stroke="black" points="44.62,-85.5 44.62,-175.75 355.38,-175.75 355.38,-85.5 44.62,-85.5"/>
<text text-anchor="start" x="52.62" y="-159.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGeneratorGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="44.62,-149.75 355.38,-149.75"/>
<g id="a_node2_0"><a xlink:href="#" xlink:title="ProbabilisticGeneratorGrammarCoverageFuzzer">
<g id="a_node2_1"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], *, replacement_attempts: int = 10, **kwargs) &#45;&gt; None:&#10;Constructor.&#10;`replacement_attempts` &#45; see `GeneratorGrammarFuzzer` constructor.&#10;All other keywords go into `ProbabilisticGrammarFuzzer`.">
<text text-anchor="start" x="143" y="-137.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_2"><a xlink:href="#" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="143" y="-126" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node2_3"><a xlink:href="#" xlink:title="add_tree_coverage(self, tree: DerivationTree) &#45;&gt; None">
<text text-anchor="start" x="143" y="-113.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_tree_coverage()</text>
</a>
</g>
<g id="a_node2_4"><a xlink:href="#" xlink:title="restart_expansion(self) &#45;&gt; None">
<text text-anchor="start" x="143" y="-103.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restart_expansion()</text>
</a>
</g>
<g id="a_node2_5"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="143" y="-92.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- PGGCFuzzer&#45;&gt;ProbabilisticGeneratorGrammarCoverageFuzzer -->
<g id="edge1" class="edge">
<title>PGGCFuzzer&#45;&gt;ProbabilisticGeneratorGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M200,-42.69C200,-51.45 200,-62.63 200,-74.04"/>
<polygon fill="none" stroke="black" points="196.5,-73.93 200,-83.93 203.5,-73.93 196.5,-73.93"/>
</g>
<!-- GeneratorGrammarFuzzer -->
<g id="node3" class="node">
<title>GeneratorGrammarFuzzer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class GeneratorGrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="0,-358.75 0,-550.25 184,-550.25 184,-358.75 0,-358.75"/>
<text text-anchor="start" x="11.38" y="-533.95" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GeneratorGrammarFuzzer</text>
<polyline fill="none" stroke="black" points="0,-524.25 184,-524.25"/>
<g id="a_node3_6"><a xlink:href="#" xlink:title="GeneratorGrammarFuzzer">
<g id="a_node3_7"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], replacement_attempts: int = 10, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="8" y="-511.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_8"><a xlink:href="#" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="8" y="-500.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node3_9"><a xlink:href="#" xlink:title="apply_result(self, result: Any, children: List[DerivationTree]) &#45;&gt; List[DerivationTree]">
<text text-anchor="start" x="8" y="-488.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">apply_result()</text>
</a>
</g>
<g id="a_node3_10"><a xlink:href="#" xlink:title="choose_tree_expansion(self, tree: DerivationTree, expandable_children: List[DerivationTree]) &#45;&gt; int:&#10;Return index of subtree in `expandable_children`&#10;to be selected for expansion. Defaults to random.">
<text text-anchor="start" x="8" y="-478" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node3_11"><a xlink:href="#" xlink:title="eval_function(self, tree, function)">
<text text-anchor="start" x="8" y="-465.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">eval_function()</text>
</a>
</g>
<g id="a_node3_12"><a xlink:href="#" xlink:title="expand_tree_once(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="8" y="-455.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node3_13"><a xlink:href="#" xlink:title="find_expansion(self, tree)">
<text text-anchor="start" x="8" y="-443.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_expansion()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="process_chosen_children(self, children: List[DerivationTree], expansion: Expansion) &#45;&gt; List[DerivationTree]:&#10;Process children after selection. &#160;By default, does nothing.">
<text text-anchor="start" x="8" y="-433" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="reset_generators(self) &#45;&gt; None">
<text text-anchor="start" x="8" y="-420.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">reset_generators()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="restart_expansion(self) &#45;&gt; None">
<text text-anchor="start" x="8" y="-410.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restart_expansion()</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="#" xlink:title="run_generator(self, expansion: Expansion, function: Callable) &#45;&gt; Iterator">
<text text-anchor="start" x="8" y="-398.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_generator()</text>
</a>
</g>
<g id="a_node3_18"><a xlink:href="#" xlink:title="run_post_functions(self, tree: DerivationTree, depth: Union[int, float] = inf) &#45;&gt; Tuple[bool, Optional[List[DerivationTree]]]">
<text text-anchor="start" x="8" y="-387" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_post_functions()</text>
</a>
</g>
<g id="a_node3_19"><a xlink:href="#" xlink:title="run_post_functions_locally(self, new_tree: DerivationTree) &#45;&gt; DerivationTree">
<text text-anchor="start" x="8" y="-375.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_post_functions_locally()</text>
</a>
</g>
<g id="a_node3_20"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="8" y="-365.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;GeneratorGrammarFuzzer -->
<g id="edge2" class="edge">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;GeneratorGrammarFuzzer</title>
<path fill="none" stroke="black" d="M185.1,-176.04C170.31,-220.12 147.08,-289.34 127.53,-347.6"/>
<polygon fill="none" stroke="black" points="124.27,-346.32 124.41,-356.91 130.91,-348.55 124.27,-346.32"/>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer -->
<g id="node6" class="node">
<title>ProbabilisticGrammarCoverageFuzzer</title>
<g id="a_node6"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="class ProbabilisticGrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="184.38,-212.75 184.38,-248.75 433.62,-248.75 433.62,-212.75 184.38,-212.75"/>
<text text-anchor="start" x="192.38" y="-227.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarCoverageFuzzer -->
<g id="edge5" class="edge">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M249.4,-176.09C260.35,-185.96 271.58,-196.07 281.3,-204.81"/>
<polygon fill="none" stroke="black" points="278.85,-207.32 288.62,-211.41 283.53,-202.11 278.85,-207.32"/>
</g>
<!-- GrammarFuzzer -->
<g id="node4" class="node">
<title>GrammarFuzzer</title>
<g id="a_node4"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="176.12,-669.5 176.12,-737.25 291.88,-737.25 291.88,-669.5 176.12,-669.5"/>
<text text-anchor="start" x="184.12" y="-720.95" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="176.12,-711.25 291.88,-711.25"/>
<g id="a_node4_21"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node4_22"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="201" y="-698.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_23"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="201" y="-687.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node4_24"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="201" y="-676.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GeneratorGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge3" class="edge">
<title>GeneratorGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M86.03,-550.46C88.32,-578.91 95.16,-608.92 111,-633 124.03,-652.8 144.76,-667.54 165.52,-678.22"/>
<polygon fill="none" stroke="black" points="163.79,-681.27 174.31,-682.48 166.84,-674.97 163.79,-681.27"/>
</g>
<!-- Fuzzer -->
<g id="node5" class="node">
<title>Fuzzer</title>
<g id="a_node5"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="205.38,-774.25 205.38,-830.75 262.62,-830.75 262.62,-774.25 205.38,-774.25"/>
<text text-anchor="start" x="213.38" y="-814.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="205.38,-804.75 262.62,-804.75"/>
<g id="a_node5_25"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node5_26"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="216" y="-792.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node5_27"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="216" y="-781" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge4" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M234,-737.53C234,-745.6 234,-754.3 234,-762.6"/>
<polygon fill="none" stroke="black" points="230.5,-762.47 234,-772.47 237.5,-762.47 230.5,-762.47"/>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node7" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node7"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="222.25,-285.75 222.25,-321.75 395.75,-321.75 395.75,-285.75 222.25,-285.75"/>
<text text-anchor="start" x="230.25" y="-300.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge6" class="edge">
<title>ProbabilisticGrammarCoverageFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M309,-248.94C309,-256.52 309,-265.65 309,-274.21"/>
<polygon fill="none" stroke="black" points="305.5,-274.21 309,-284.21 312.5,-274.21 305.5,-274.21"/>
</g>
<!-- ProbabilisticGrammarFuzzer -->
<g id="node10" class="node">
<title>ProbabilisticGrammarFuzzer</title>
<g id="a_node10"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="class ProbabilisticGrammarFuzzer:&#10;A grammar&#45;based fuzzer respecting probabilities in grammars.">
<polygon fill="none" stroke="black" points="366.25,-591.88 366.25,-627.88 557.75,-627.88 557.75,-591.88 366.25,-591.88"/>
<text text-anchor="start" x="374.25" y="-606.58" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarFuzzer -->
<g id="edge10" class="edge">
<title>ProbabilisticGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarFuzzer</title>
<path fill="none" stroke="black" d="M356.9,-249.18C374.27,-257.65 392.64,-269.48 405,-285.25 474.65,-374.09 470.68,-518.93 465.29,-580.13"/>
<polygon fill="none" stroke="black" points="461.81,-579.75 464.33,-590.04 468.78,-580.43 461.81,-579.75"/>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node8" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node8"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="201.62,-436.5 201.62,-472.5 416.38,-472.5 416.38,-436.5 201.62,-436.5"/>
<text text-anchor="start" x="209.62" y="-451.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge7" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M309,-322.1C309,-347.41 309,-394.72 309,-425.13"/>
<polygon fill="none" stroke="black" points="305.5,-424.74 309,-434.74 312.5,-424.74 305.5,-424.74"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node9" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node9"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="119.88,-587.25 119.88,-632.5 348.12,-632.5 348.12,-587.25 119.88,-587.25"/>
<text text-anchor="start" x="127.88" y="-616.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="119.88,-606.5 348.12,-606.5"/>
<g id="a_node9_28"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node9_29"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="204" y="-594" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge8" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M300.54,-472.8C288.22,-497.99 265.12,-545.24 249.65,-576.88"/>
<polygon fill="none" stroke="black" points="246.63,-575.08 245.38,-585.6 252.92,-578.15 246.63,-575.08"/>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge9" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M234,-632.56C234,-640.13 234,-648.93 234,-657.67"/>
<polygon fill="none" stroke="black" points="230.5,-657.52 234,-667.52 237.5,-657.52 230.5,-657.52"/>
</g>
<!-- ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge11" class="edge">
<title>ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M418.58,-628.3C385.86,-641.43 340.37,-659.69 302.73,-674.79"/>
<polygon fill="none" stroke="black" points="301.72,-671.43 293.74,-678.4 304.33,-677.92 301.72,-671.43"/>
</g>
<!-- Legend -->
<g id="node11" class="node">
<title>Legend</title>
<text text-anchor="start" x="264.38" y="-40.5" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="264.38" y="-30.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="270.38" y="-30.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="264.38" y="-20.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="270.38" y="-20.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="264.38" y="-10.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="270.38" y="-10.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="264.38" y="-1.45" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
