<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (20230911.1827)
 -->
<!-- Pages: 1 -->
<svg width="336pt" height="275pt"
 viewBox="0.00 0.00 336.38 275.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 271)">
<g id="a_graph0"><a xlink:title="ProbabilisticGrammarFuzzer class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-271 332.38,-271 332.38,4 -4,4"/>
</a>
</g>
<!-- ProbabilisticGrammarFuzzer -->
<g id="node1" class="node">
<title>ProbabilisticGrammarFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class ProbabilisticGrammarFuzzer:&#10;A grammar&#45;based fuzzer respecting probabilities in grammars.">
<polygon fill="none" stroke="black" points="0,-0.5 0,-68.25 191.5,-68.25 191.5,-0.5 0,-0.5"/>
<text text-anchor="start" x="8" y="-51.95" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarFuzzer</text>
<polyline fill="none" stroke="black" points="0,-42.25 191.5,-42.25"/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="ProbabilisticGrammarFuzzer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="check_grammar(self) &#45;&gt; None:&#10;Check the grammar passed">
<text text-anchor="start" x="26.75" y="-29.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">check_grammar()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[Any]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="26.75" y="-18.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="26.75" y="-7.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer -->
<g id="node2" class="node">
<title>GrammarFuzzer</title>
<g id="a_node2"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="37.88,-105.25 37.88,-173 153.62,-173 153.62,-105.25 37.88,-105.25"/>
<text text-anchor="start" x="45.88" y="-156.7" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="37.88,-147 153.62,-147"/>
<g id="a_node2_4"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node2_5"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="62.75" y="-134.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_6"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="62.75" y="-123.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node2_7"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="62.75" y="-112" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge1" class="edge">
<title>ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M95.75,-68.73C95.75,-76.62 95.75,-85.16 95.75,-93.45"/>
<polygon fill="none" stroke="black" points="92.25,-93.42 95.75,-103.42 99.25,-93.42 92.25,-93.42"/>
</g>
<!-- Fuzzer -->
<g id="node3" class="node">
<title>Fuzzer</title>
<g id="a_node3"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="67.12,-210 67.12,-266.5 124.38,-266.5 124.38,-210 67.12,-210"/>
<text text-anchor="start" x="75.12" y="-250.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="67.12,-240.5 124.38,-240.5"/>
<g id="a_node3_8"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node3_9"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="77.75" y="-228" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node3_10"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="77.75" y="-216.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge2" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M95.75,-173.28C95.75,-181.35 95.75,-190.05 95.75,-198.35"/>
<polygon fill="none" stroke="black" points="92.25,-198.22 95.75,-208.22 99.25,-198.22 92.25,-198.22"/>
</g>
<!-- Legend -->
<g id="node4" class="node">
<title>Legend</title>
<text text-anchor="start" x="209.12" y="-50.38" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="209.12" y="-40.38" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="215.12" y="-40.38" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="209.12" y="-30.38" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="215.12" y="-30.38" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="209.12" y="-20.38" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="215.12" y="-20.38" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="209.12" y="-11.32" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
